{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handler","type","onChange","App","state","searchField","this","filteredMonsters","filter","toLowerCase","includes","e","setState","target","value","fetch","then","response","json","users","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAML,EAAMG,QAAQG,QACpB,4BAAIN,EAAMG,QAAQI,YCDXC,EAAW,SAAAR,GAAK,OACrB,sBAAKC,UAAU,YAAf,eACAD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAMF,UAAU,iBAAkCE,QAASA,EAA3D,cAAsCA,EAAQC,WCN7CO,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,QAAf,OACxB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoD7DG,G,wDAlDb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALJ,E,0CASb,WAAS,IAAD,SAC2BC,KAAKF,MAA9BR,EADF,EACEA,SAAUS,EADZ,EACYA,YACZE,EAAkBX,EAASY,QAAO,SAAAlB,GAAO,OAC7CA,EAAQG,KAAKgB,cAAcC,SAASL,EAAYI,kBAGlD,OAIE,sBAAKrB,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,QAAS,SAAAW,GAAC,OACjD,EAAKC,SAAS,CAACP,YAAaM,EAAEE,OAAOC,WAEvC,cAAC,EAAD,CAAUlB,SAAUW,S,+BAS1B,WAAoB,IAAD,OAElBQ,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEhB,SAAUuB,W,GAtC3BC,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.092989ac.chunk.js","sourcesContent":["import {React} from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n      <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt='monster' />\n      <h1> {props.monster.name}</h1>\n      <p>{props.monster.email}</p>\n    </div>\n); ","import React from 'react';\nimport './card-list.styles.css';\nimport '../card/card.component';\nimport { Card } from '../card/card.component';\n\n\nexport const CardList = props => (\n        <div className='card-list' >  {          \n        props.monsters.map(monster => (\n            <Card className='card-container' key={monster.id} monster={monster}> </Card>\n        ))}\n        </div>\n);\n","import React from 'react';\nimport './search-bar.styles.css';\n\nexport const SearchBox =({placeholder, handler }) => (\n<input className='search' type='search' placeholder={placeholder} onChange={handler} />\n);","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-bar/search-bar.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  render(){\n    const { monsters, searchField} = this.state;\n    const filteredMonsters= monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      \n      \n     \n      <div className='App'>\n        <h1> Monster Robox </h1>\n        <SearchBox placeholder='search monsters' handler={e => \n          this.setState({searchField: e.target.value})\n         } /> \n        <CardList monsters={filteredMonsters} />\n     \n    \n      \n      </div>\n\n    );\n  } \n\n  componentDidMount(){\n    \n   fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users})\n\n   );\n    \n    \n  }\n\n\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}